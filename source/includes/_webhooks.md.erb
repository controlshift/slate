# Webhook Endpoints

Webhooks can be used by software engineers to integrate ControlShift with third-party systems. They allow engineers to build software that is triggered by events that take place within ControlShift. ControlShift executes HTTPS callbacks when certain events happen (e.g. a petition is launched; a category is changed).

To begin using webhooks, visit the admin for your ControlShift Platform and choose Settings > Integrations > Webhooks.  To begin sending data, you'll need to add a "New Webhook Endpoint." Each Webhook Endpoint URL you specify will receive a stream of all the hooks that occur within your ControlShift account.

If you need additional information about webhooks or how to use them, please send us a support email [support@controlshiftlabs.com](mailto:support@controlshiftlabs.com).

### What is a Webhook?

Webhooks are HTTPS callbacks sent to a URL called an endpoint. Each time something happens in ControlShift an HTTPS POST request is made to the endpoints you've defined.

Many platforms like Twilio, Github and Slack also use Webhooks.

To handle a webhook you'll need a web application that can accept the HTTPS requests. If you already have a web application set up, handling a webhook
is usually as easy as adding a new URL to your application. If not you'll have to write a new web application. Most programming languages have frameworks
that can make this easy.  Webhooks can also be handled by serverless functions like AWS Lambda or Azure Functions.

Webhooks are just HTTP requests. Anything that can process requests from the web can process webhooks, if the application behind it is programmed properly. Webhooks are just a fancy name for using HTTP requests for event based integration between apps.

### Retries

For webhook notifications successfully processed the response should have an HTTP 2XX status code. Responses returning a different status code will be marked as failed and automatically retried up to 9 times with an exponential backoff (e.g.: after 15s, 30s, 90s, etc.).

If after 9 retries the notification cannot be delivered, the webhook endpoint will be automatically disabled and will need to be re-enabled from the admin page to start receiving webhook notifications again. We do this to protect our infrastructure and ability to deliver webhooks successfully.

We recommend making sure your webhook endpoint only returns non-2XX statuses if your service is temporarily down or experiencng a transient error. Applications that consistently return an error status when they recieve particular webhooks will inevitably end up disabled once retries are exhausted.

### Security

Securing access to your endpoints where webhooks are sent is important. We recommend taking a variety of steps.

* Using HTTPS with modern cypher suite.
* Restricting access by IP address
* Using basic HTTP authentication or an API token/secret in the URL.
* Verifying the signature hash of the message payload we send to authenticate ControlShift as the source of the webhook.

### Webhook HMAC Authenticity Signing

We send a special HTTP header along with webhook deliveries that allows customers to verify that the body of the
webhook being delivered originated from within your ControlShift account. We use HMAC and SHA 256 along with a
secret generated for each endpoint

Using HMAC Authenticity signing is optional, but is a security best practice. Otherwise someone else could send requests to your webhook endpoint
that impersonate ControlShift. HMAC signing guarantees that the webhooks you receive are authentic.

You can retrieve the secret or generate a new one via Settings > Integrations > Webhooks within your ControlShift platform admin.

Header | Value
---------- | -------
`x-controlshift-webhook-signature` | sha256:abc123hjkl6789

The value is the prefix `sha256:` specifying the algorithm in use combined with the [HMAC digest](https://en.wikipedia.org/wiki/HMAC) of the webhook HTTP
request body signed with the signing secret specified for your endpoint in the ControlShift admin tools.

To verify the webhooks you receive are authentic, users should calculate the same digest value and compare it to the digest
passed in the `x-controlshift-webhook-signature` header. These values should always be the same.

In a Ruby on Rails application, the code for verifying the HMAC signature while processing the webhook in your code might use an implementation like:

```ruby
your_hmac_secret = 'abc123' # store this securely!
secure_hash = "sha256:#{OpenSSL::HMAC.hexdigest('SHA256', your_hmac_secret, request.raw_post)}"
if secure_hash != request.headers['x-controlshift-webhook-signature']
  raise "Incorrect HMAC signature header"
end
```

### IP Addresses

Webhooks will be delivered from a stable set of the IP addresses that will not change. It is a good idea to safe-list these addresses and block webhooks originating from unknown IP addresses.
The IP addresses vary depending on where your Controlshift instance is hosted, you can check with us at support@controlshiftlabs.com if you don't know which data center your organization is being hosted.

#### North American data center:

* 54.144.65.46
* 54.208.56.53

#### European data center:

* 3.67.205.229
* 18.195.87.158

### Direct AWS Access

The Bulk Data API notifies customers about new data files via webhook. In addition to allowing access via signed HTTPS
request, the Bulk Data API allows direct access to these files from within the same region where your ControlShift account
resides (usually us-east-1). Direct AWS Access allows for high-performance access to files on AWS S3 without leaving the AWS
Cloud for customers with a point of presence in the same AWS Region. Contact support if you would like to make use of this advanced feature.

## Designing a data sync

The most common use case for the Webhooks API is synchronizing ControlShift to an organization's CRM of record when an out-of the-box CRM integration is not available as part of the ControlShift product.

While designing a CRM integration sync, there are a few specific webhook events that a minimalist integration should respond to as a starting point depending on the ControlShift features that are in use.

Webhook | Description
---------- | -------
`signature.created` | a user signed a petition
`attendee.created` | a user signed up to attend an event
`local_chapter.member.created` | a user joined a local chapter
`unsubscribe.created` | a user unsubscribed and no longer wishes to receive email


Responding to these events is generally sufficient to keep an external mailing list up to date so that staff do not need to shuffle CSVs back and forth.



## Webhook types summary

You can configure ControlShift Labs Webhooks to return the following event types:

Type | Description
---------- | -------
<% data.webhooks.each do |webhook| %>
  [<%= webhook.webhook %>](#webhook-endpoints-<%= webhook.webhook.gsub('.','-') %>) | <%= webhook.description %>
<% end %>


<% data.webhooks.each do |webhook| %>
## <%= webhook.webhook %>
> Example payload for `<%= webhook.webhook %>`:

<% if webhook.payload %>
  ```json
  <%= JSON.pretty_generate(webhook.payload) %>
  ```
<% end %>

<%= webhook.description %>

<% if webhook.notes %>
  <%= webhook.notes %>
<% end %>

<% end %>


